Index: app/src/main/java/com/example/analyzemate/Controllers/Adapters/RecyclerViewAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.analyzemate.Controllers.Adapters;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.example.analyzemate.Models.State;\r\nimport com.example.analyzemate.R;\r\nimport com.example.analyzemate.Views.PaperActivity;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * Кастомный адаптер RecyclerView. Позовляет создавать и отоброжать новые объекты в списке.\r\n */\r\npublic class RecyclerViewAdapter extends RecyclerView.Adapter<RecyclerViewAdapter.ViewHolder> {\r\n    private final LayoutInflater inflater;\r\n    private List<State> states;\r\n\r\n    /**\r\n     * Создание нового объекта типа RecyclerViewAdapter\r\n     * @param context - контекст\r\n     * @param states - состояния(предметы списка)\r\n     */\r\n    public RecyclerViewAdapter(Context context, List<State> states) {\r\n        this.states = states;\r\n        this.inflater = LayoutInflater.from(context);\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public RecyclerViewAdapter.ViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int viewType) {\r\n        View view = inflater.inflate(R.layout.paper_view_item, viewGroup, false);\r\n        return new ViewHolder(view);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(RecyclerViewAdapter.ViewHolder holder, int position) {\r\n        State state = states.get(position);\r\n        holder.bankView.setImageResource(state.getBankResource());\r\n        holder.nameView.setText(state.getName());\r\n        holder.costView.setText(state.getCost());\r\n        holder.trendView.setText(state.getTrend());\r\n        holder.itemView.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(view.getContext(), PaperActivity.class);\r\n                intent.putExtra(\"uid\", state.getUID());\r\n                view.getContext().startActivity(intent);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Возвращает размер датасета\r\n     * @return размер датасета\r\n     */\r\n    @Override\r\n    public int getItemCount() {\r\n        return states.size();\r\n    }\r\n\r\n\r\n    /**\r\n     *  Модифицированный ViewHolder для представления предмета в списке\r\n     */\r\n    public static class ViewHolder extends RecyclerView.ViewHolder {\r\n        final ImageView bankView;\r\n        final TextView nameView, costView, trendView;\r\n\r\n        ViewHolder(View view) {\r\n            super(view);\r\n            bankView = view.findViewById(R.id.paperImageView);\r\n            nameView = view.findViewById(R.id.paperNameView);\r\n            costView = view.findViewById(R.id.paperCost);\r\n            trendView = view.findViewById(R.id.paperChange);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/analyzemate/Controllers/Adapters/RecyclerViewAdapter.java b/app/src/main/java/com/example/analyzemate/Controllers/Adapters/RecyclerViewAdapter.java
--- a/app/src/main/java/com/example/analyzemate/Controllers/Adapters/RecyclerViewAdapter.java	(revision f6e448baf3f65dae190045243eb0f9842db55b89)
+++ b/app/src/main/java/com/example/analyzemate/Controllers/Adapters/RecyclerViewAdapter.java	(date 1715600068664)
@@ -47,7 +47,6 @@
         holder.bankView.setImageResource(state.getBankResource());
         holder.nameView.setText(state.getName());
         holder.costView.setText(state.getCost());
-        holder.trendView.setText(state.getTrend());
         holder.itemView.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
Index: app/src/main/java/com/example/analyzemate/Views/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.analyzemate.Views;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Color;\r\nimport android.os.Bundle;\r\nimport android.text.InputType;\r\nimport android.transition.AutoTransition;\r\nimport android.transition.TransitionManager;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.activity.EdgeToEdge;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.example.analyzemate.Controllers.Adapters.RecyclerViewAdapter;\r\nimport com.example.analyzemate.Controllers.Adapters.UiAdapter;\r\nimport com.example.analyzemate.Controllers.Interfaces.FireBaseHandler;\r\nimport com.example.analyzemate.Controllers.Interfaces.OnBalanceUpdateListener;\r\nimport com.example.analyzemate.Controllers.Interfaces.UserInfoHandler;\r\nimport com.example.analyzemate.Models.ExistingUser;\r\nimport com.example.analyzemate.Models.State;\r\nimport com.example.analyzemate.R;\r\nimport com.example.analyzemate.Views.Autorization.LoginActivity;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView;\r\nimport com.google.firebase.messaging.FirebaseMessaging;\r\n\r\nimport org.json.JSONException;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Objects;\r\n\r\npublic class MainActivity extends AppCompatActivity implements OnBalanceUpdateListener {\r\n    ArrayList<State> states = new ArrayList<State>();\r\n    Integer curr_briefcase = 1;\r\n    private static final int MAX_BRIEFCASE = 3;\r\n    public static final String APP_PREFERENCES = \"user\";\r\n    TextView textView_balance;\r\n    @Override\r\n    public void onBalanceUpdated(float balance) {\r\n        // Обновляем UI с полученным балансом\r\n        textView_balance.setText(String.valueOf(balance));\r\n    }\r\n\r\n    @Override\r\n    public void existingUserReceived(ExistingUser existingUser) {\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        EdgeToEdge.enable(this);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        textView_balance = findViewById(R.id.textView_balance);\r\n        textView_balance.setOnClickListener(view -> CreateDialogView());\r\n\r\n        //// Отправка регистрационного токена на сервер для FCM push\r\n        Task<String> stringTask = FirebaseMessaging.getInstance().getToken()\r\n                .addOnCompleteListener(new OnCompleteListener<String>() {\r\n                    @Override\r\n                    public void onComplete(@NonNull Task<String> task) {\r\n                        if (!task.isSuccessful()) {\r\n                            // Обработка ошибки\r\n                            return;\r\n                        }\r\n\r\n                        // Полученный токен\r\n                        String token = task.getResult();\r\n\r\n                        // Отправьте этот токен на ваш сервер FastAPI\r\n                        FireBaseHandler.sendRegistrationToken(getApplicationContext(), token);\r\n                    }\r\n                });\r\n\r\n        // Устанавливаем себя в качестве слушателя обновления баланса\r\n        UserInfoHandler.setBalanceUpdateListener(this);\r\n        // Получаем баланс с сервера\r\n        UserInfoHandler.getBalanceFromServer(MainActivity.this);\r\n\r\n        Bundle extras = getIntent().getExtras();\r\n        SharedPreferences preferences = getSharedPreferences(APP_PREFERENCES, Context.MODE_PRIVATE);\r\n\r\n        // Проверка токена авторизации\r\n        CheckAuthorizationToken(preferences);\r\n\r\n        if (extras != null) { // Если Активити передало параметры\r\n            RememberUser(extras, preferences);\r\n        }\r\n\r\n        // Проверка авторизации пользователя\r\n        CheckAuthorizationToken(preferences);\r\n\r\n        /*\r\n        * Настройка навигационной панели\r\n        * Задание начального экрана, добавление путей перехода\r\n        */\r\n        BottomNavigationView bottomNavigationView = findViewById(R.id.bottomNavigationView);\r\n        bottomNavigationView.setSelectedItemId(R.id.bottom_home);\r\n        bottomNavigationView.setOnItemSelectedListener(item -> {\r\n            int item_id = item.getItemId();\r\n            if (item_id == R.id.bottom_home){\r\n                return true;\r\n            } else if (item_id == R.id.bottom_search){\r\n                startActivity(new Intent(getApplicationContext(), SearchActivity.class));\r\n                overridePendingTransition(R.anim.slide_right, R.anim.slide_left);\r\n                finish();\r\n                return true;\r\n            } else if (item_id == R.id.bottom_stock){\r\n                startActivity(new Intent(getApplicationContext(), StockActivity.class));\r\n                overridePendingTransition(R.anim.slide_right, R.anim.slide_left);\r\n                finish();\r\n                return true;\r\n            } else if (item_id == R.id.bottom_notification){\r\n                startActivity(new Intent(getApplicationContext(), NotificationActivity.class));\r\n                overridePendingTransition(R.anim.slide_right, R.anim.slide_left);\r\n                finish();\r\n                return true;\r\n            } else if (item_id == R.id.bottom_account){\r\n                startActivity(new Intent(getApplicationContext(), AccountActivity.class));\r\n                overridePendingTransition(R.anim.slide_right, R.anim.slide_left);\r\n                finish();\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n\r\n        /*\r\n         * Настройка списка ценных бумаг портфеля, задание адаптера\r\n         */\r\n        setInitialData();\r\n        RecyclerView recyclerView = findViewById(R.id.recyclerViewHome);\r\n        RecyclerViewAdapter adapter = new RecyclerViewAdapter(this, states);\r\n        recyclerView.setAdapter(adapter);\r\n\r\n        // Добавление портфелей\r\n        ImageView bt_add = findViewById(R.id.bt_add);\r\n        LinearLayout layout = findViewById(R.id.layout);\r\n        bt_add.setOnClickListener(view -> {\r\n            curr_briefcase++;\r\n            if (MAX_BRIEFCASE <= curr_briefcase) {\r\n                bt_add.setVisibility(View.GONE);\r\n            }\r\n            CreateBriefcase(view, bt_add, layout);\r\n        });\r\n    }\r\n\r\n    /*\r\n        Метод для создания новых портфелей.\r\n        Создает новый портфель с пустым списком ценных бумаг.\r\n     */\r\n    private void CreateBriefcase(View view, ImageView bt_add, LinearLayout layout) {\r\n        LinearLayout briefcaseLayout = new LinearLayout(view.getContext());\r\n        briefcaseLayout.setOrientation(LinearLayout.HORIZONTAL);\r\n        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(\r\n                LinearLayout.LayoutParams.MATCH_PARENT,\r\n                LinearLayout.LayoutParams.WRAP_CONTENT);\r\n        layoutParams.setMargins(\r\n                UiAdapter.dpToPx(view.getContext(), 20),\r\n                UiAdapter.dpToPx(view.getContext(), 10),\r\n                UiAdapter.dpToPx(view.getContext(), 20),\r\n                UiAdapter.dpToPx(view.getContext(), 10));\r\n        briefcaseLayout.setLayoutParams(layoutParams);\r\n        TransitionManager.beginDelayedTransition(briefcaseLayout, new AutoTransition());\r\n\r\n        TextView briefcaseTextView = new TextView(view.getContext());\r\n        briefcaseTextView.setLayoutParams(new LinearLayout.LayoutParams(\r\n                LinearLayout.LayoutParams.MATCH_PARENT,\r\n                LinearLayout.LayoutParams.WRAP_CONTENT, 1));\r\n        briefcaseTextView.setText(R.string.briefcase);\r\n        briefcaseTextView.setTextSize(22);\r\n        briefcaseTextView.setTextColor(Color.BLACK);\r\n        briefcaseLayout.addView(briefcaseTextView);\r\n\r\n        Button historyButton = new Button(view.getContext());\r\n        layoutParams = new LinearLayout.LayoutParams(\r\n                LinearLayout.LayoutParams.MATCH_PARENT,\r\n                LinearLayout.LayoutParams.WRAP_CONTENT, 1);\r\n        historyButton.setLayoutParams(layoutParams);\r\n        historyButton.setText(R.string.history);\r\n        historyButton.setTextSize(15);\r\n        historyButton.setBackgroundColor(Color.TRANSPARENT);\r\n        historyButton.setTextColor(Color.BLACK);\r\n        historyButton.setCompoundDrawablesRelativeWithIntrinsicBounds(0,0, R.drawable.baseline_history_24,0);\r\n        briefcaseLayout.addView(historyButton);\r\n        layout.addView(briefcaseLayout);\r\n\r\n        RecyclerViewAdapter adapter = new RecyclerViewAdapter(this, states);\r\n        RecyclerView recyclerView = new RecyclerView(layout.getContext());\r\n        recyclerView.setAdapter(adapter);\r\n        recyclerView.setId(View.generateViewId());\r\n        Toast.makeText(view.getContext(),String.valueOf(recyclerView.getId()), Toast.LENGTH_SHORT).show();\r\n        recyclerView.setLayoutManager(new LinearLayoutManager(briefcaseLayout.getContext()));\r\n        layout.addView(recyclerView);\r\n    }\r\n\r\n    private void CreateDialogView() {\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\r\n        builder.setTitle(\"Введите баланс\");\r\n        final EditText input = new EditText(this);\r\n        input.setInputType(InputType.TYPE_CLASS_NUMBER|InputType.TYPE_NUMBER_FLAG_DECIMAL);\r\n        builder.setView(input);\r\n\r\n        builder.setPositiveButton(\"Принять\", (dialogInterface, i) -> {\r\n            float d = (float) Double.parseDouble(input.getText().toString());\r\n\r\n            textView_balance.setText(String.valueOf(d));\r\n\r\n            try {\r\n                UserInfoHandler.UpdateUserBalance(MainActivity.this, d);\r\n            } catch (JSONException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        });\r\n        builder.setNegativeButton(\"Отмена\", (dialogInterface, i) -> dialogInterface.cancel());\r\n        builder.show();\r\n    }\r\n\r\n    /**\r\n     * Запоминаем пользователя в памяти телефона.\r\n     Сохраняет в памяти телефона флаг remember.\r\n     * @param extras переменные, переданные из другого активити\r\n     * @param preferences переменная с переменными из памяти телефона\r\n     */\r\n    private void RememberUser(Bundle extras, SharedPreferences preferences) {\r\n        String value = extras.getString(\"key\"); // Полученный параметр\r\n        // Если перенапревлены из LoginActivity\r\n        if (Objects.equals(value, \"authorization\")) {\r\n            SharedPreferences.Editor editor = preferences.edit();\r\n            editor.putString(\"token\", \"true\");\r\n            editor.apply();\r\n            // TODO Заглушка. Заменить на временное хранение\r\n            Toast.makeText(MainActivity.this, \"Remember\", Toast.LENGTH_SHORT).show();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Проверка авторизации пользователя\r\n     * Запускает LoginActivity, если пользователь не авторизован\r\n     * @param preferences переменная с переменными из памяти телефона\r\n     */\r\n    private void CheckAuthorizationToken(SharedPreferences preferences) {\r\n        if (preferences.contains(\"token\")) {\r\n            //  затычка, удаляет пользователя из памяти телефона\r\n//            SharedPreferences.Editor editor = preferences.edit();\r\n//             editor.clear();\r\n//             editor.apply();\r\n//             Toast.makeText(MainActivity.this, \"check\", Toast.LENGTH_SHORT).show();\r\n        } else {\r\n            startActivity(new Intent(getApplicationContext(), LoginActivity.class));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Загглушка. Создает список бумаг и иконок\r\n     */\r\n    private void setInitialData() {\r\n        states.add(new State(\"SBER\",\"Gasprompt\", R.drawable.baseline_gas_meter_24, \"112.1\", \"8\"));\r\n        states.add(new State(\"SBER\",\"RosCosmostars\", R.drawable.baseline_home_24, \"5.2\", \"131\"));\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/analyzemate/Views/MainActivity.java b/app/src/main/java/com/example/analyzemate/Views/MainActivity.java
--- a/app/src/main/java/com/example/analyzemate/Views/MainActivity.java	(revision f6e448baf3f65dae190045243eb0f9842db55b89)
+++ b/app/src/main/java/com/example/analyzemate/Views/MainActivity.java	(date 1715607892554)
@@ -44,7 +44,7 @@
 
 public class MainActivity extends AppCompatActivity implements OnBalanceUpdateListener {
     ArrayList<State> states = new ArrayList<State>();
-    Integer curr_briefcase = 1;
+    private Integer curr_briefcase = 1;
     private static final int MAX_BRIEFCASE = 3;
     public static final String APP_PREFERENCES = "user";
     TextView textView_balance;
@@ -56,7 +56,6 @@
 
     @Override
     public void existingUserReceived(ExistingUser existingUser) {
-
     }
 
     @Override
Index: app/src/main/java/com/example/analyzemate/Models/State.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.analyzemate.Models;\r\n\r\npublic class State {\r\n    private  String uid;\r\n    private Integer bankResource;\r\n    private String name;\r\n    private String cost;\r\n    private String trend;\r\n\r\n    public State(String uid, String name, Integer bank, String cost, String trend) {\r\n        this.uid = uid;\r\n        this.name = name;\r\n        this.bankResource = bank;\r\n        this.cost = cost;\r\n        this.trend = trend;\r\n    }\r\n\r\n    public String getUID() {\r\n        return this.uid;\r\n    }\r\n\r\n    public void setUID(String uid) {\r\n        this.uid = uid;\r\n    }\r\n\r\n    public String getName() {\r\n        return this.name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public int getBankResource() {\r\n        return this.bankResource;\r\n    }\r\n\r\n    public void setBankResource(int bankResource) {\r\n        this.bankResource = bankResource;\r\n    }\r\n\r\n    public String getCost() {\r\n        return this.cost;\r\n    }\r\n\r\n    public void setCost(String cost) {\r\n        this.cost = cost;\r\n    }\r\n\r\n    public String getTrend() {\r\n        return this.trend;\r\n    }\r\n\r\n    public void setTrend(String trend) {\r\n        this.trend = (trend + \"%\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/analyzemate/Models/State.java b/app/src/main/java/com/example/analyzemate/Models/State.java
--- a/app/src/main/java/com/example/analyzemate/Models/State.java	(revision f6e448baf3f65dae190045243eb0f9842db55b89)
+++ b/app/src/main/java/com/example/analyzemate/Models/State.java	(date 1715600068664)
@@ -6,7 +6,6 @@
     private String name;
     private String cost;
     private String trend;
-
     public State(String uid, String name, Integer bank, String cost, String trend) {
         this.uid = uid;
         this.name = name;
Index: app/src/main/java/com/example/analyzemate/Views/Autorization/LoginActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.analyzemate.Views.Autorization;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.text.SpannableString;\r\nimport android.text.Spanned;\r\nimport android.text.method.LinkMovementMethod;\r\nimport android.text.style.ClickableSpan;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.activity.EdgeToEdge;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.graphics.Insets;\r\nimport androidx.core.view.ViewCompat;\r\nimport androidx.core.view.WindowInsetsCompat;\r\n\r\nimport com.example.analyzemate.Controllers.Interfaces.AutorizationHandler;\r\nimport com.example.analyzemate.Models.User;\r\nimport com.example.analyzemate.R;\r\nimport com.example.analyzemate.Views.MainActivity;\r\n\r\nimport java.util.Date;\r\n\r\npublic class LoginActivity extends AppCompatActivity {\r\n    Button bEnter;\r\n    EditText etEmail, etPassword;\r\n    TextView tvRegister;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        EdgeToEdge.enable(this);\r\n        setContentView(R.layout.activity_login);\r\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {\r\n            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());\r\n            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);\r\n            return insets;\r\n        });\r\n\r\n        // Получение полей формы\r\n        etEmail = findViewById(R.id.edit_email);\r\n        etPassword = findViewById(R.id.edit_password);\r\n        tvRegister = findViewById(R.id.str_register);\r\n        bEnter = findViewById(R.id.bt_register);\r\n\r\n        // Создание текста с ссылкой на регистрацию\r\n        ClickableSpan clickableSpan = new ClickableSpan() {\r\n            @Override\r\n            public void onClick(@NonNull View view) {\r\n                startActivity(new Intent(getApplicationContext(), RegisterActivity.class));\r\n            }\r\n        };\r\n        SpannableString register = new SpannableString(\"Зарегистрироваться\");\r\n        register.setSpan(clickableSpan, 0, 18, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\r\n\r\n        // Задание текста\r\n        tvRegister.setText(register);\r\n        tvRegister.setMovementMethod(LinkMovementMethod.getInstance());\r\n\r\n        // Обработка кнопки Войти\r\n        bEnter.setOnClickListener(this::goToMainActivity);\r\n    }\r\n\r\n    /**\r\n     * Метод, вызываемый при нажатии кнопки Войти\r\n     * Создается User, вызывается запрос к серверу на авторизацию.\r\n     * @param view\r\n     */\r\n    private void goToMainActivity(View view) {\r\n        User user = GetUserFromEditData();\r\n//        // Todo убрать после работы серва\r\n//        Intent intent = new Intent(view.getContext(), MainActivity.class);\r\n//        view.getContext().startActivity(intent);\r\n        if (ValidateFields()) {\r\n            AutorizationHandler.AuthenticationUser(user, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Получение и создание User из введенных данных\r\n     * @return User\r\n     */\r\n    private User GetUserFromEditData() {\r\n        String email = etEmail.getText().toString();\r\n        String password = etPassword.getText().toString();\r\n\r\n        // Создание пользователя\r\n        User user = new User(email, \"\", \"\", \"\", new Date(), password);\r\n        return  user;\r\n    }\r\n\r\n    /**\r\n     * Метод валидации полей входа.\r\n     * Метод проверяет пустоту полей.\r\n     * @return true, если валидация пройдена, в ином случае false\r\n     */\r\n    private boolean ValidateFields() {\r\n        String email =  etEmail.getText().toString();\r\n        String password = etPassword.getText().toString();\r\n        boolean isEmpty = false;\r\n\r\n        if (email.isEmpty()) {\r\n            etEmail.setError(\"Поле должно быть заполнено\");\r\n            isEmpty = true;\r\n        }\r\n\r\n        if (password.isEmpty()) {\r\n            etPassword.setError(\"Поле должно быть заполнено\");\r\n            isEmpty = true;\r\n        }\r\n\r\n        return !isEmpty;\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/analyzemate/Views/Autorization/LoginActivity.java b/app/src/main/java/com/example/analyzemate/Views/Autorization/LoginActivity.java
--- a/app/src/main/java/com/example/analyzemate/Views/Autorization/LoginActivity.java	(revision f6e448baf3f65dae190045243eb0f9842db55b89)
+++ b/app/src/main/java/com/example/analyzemate/Views/Autorization/LoginActivity.java	(date 1715429796789)
@@ -21,7 +21,6 @@
 import com.example.analyzemate.Controllers.Interfaces.AutorizationHandler;
 import com.example.analyzemate.Models.User;
 import com.example.analyzemate.R;
-import com.example.analyzemate.Views.MainActivity;
 
 import java.util.Date;
 
@@ -72,7 +71,6 @@
      */
     private void goToMainActivity(View view) {
         User user = GetUserFromEditData();
-//        // Todo убрать после работы серва
 //        Intent intent = new Intent(view.getContext(), MainActivity.class);
 //        view.getContext().startActivity(intent);
         if (ValidateFields()) {
Index: app/src/main/java/com/example/analyzemate/Models/Constants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.analyzemate.Models;\r\n\r\npublic class Constants {\r\n    public static final String SERVER_URL = \"http://192.168.3.234:8000/\";\r\n\r\n    // Лев\r\n    // моб инет: http://192.168.74.5:8000/\r\n    // вай фай общага: http://192.168.3.234:8000/\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/analyzemate/Models/Constants.java b/app/src/main/java/com/example/analyzemate/Models/Constants.java
--- a/app/src/main/java/com/example/analyzemate/Models/Constants.java	(revision f6e448baf3f65dae190045243eb0f9842db55b89)
+++ b/app/src/main/java/com/example/analyzemate/Models/Constants.java	(date 1715534736264)
@@ -1,7 +1,7 @@
 package com.example.analyzemate.Models;
 
 public class Constants {
-    public static final String SERVER_URL = "http://192.168.3.234:8000/";
+    public static final String SERVER_URL = "http://172.31.76.47:8000/";
 
     // Лев
     // моб инет: http://192.168.74.5:8000/
